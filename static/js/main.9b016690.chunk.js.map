{"version":3,"sources":["components/Transaction/index.tsx","utils/constants.ts","components/App/skeleton.tsx","utils/mocks/index.ts","components/App/index.tsx","components/App/hooks.ts","utils/animation.ts","reportWebVitals.ts","index.tsx"],"names":["locale","options","weekday","year","month","day","TransactionItem","React","forwardRef","ref","transaction","amount","currency","datetime","lastNumbers","card","style","className","formattedAmount","Intl","NumberFormat","format","formattedDate","Date","toLocaleDateString","Array","fill","concat","join","dateTime","process","initialList","REACT_APP_SECRET_KEY","REACT_APP_P_ID","Skeleton","mockResponse","count","items","map","_","id","toDateString","App","useState","transactions","setTransactions","error","setError","lastTransaction","setLastTransaction","useInView","rootMargin","inView","entry","useEffect","target","Promise","res","rej","timer","setTimeout","clearTimeout","undefined","then","response","defaultTransactions","Error","last","catch","message","fetchTransactions","getIdx","currentIdx","transactionChunkSize","animationDelayOrchestrator","t","i","Transaction","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b016690.chunk.js","sourcesContent":["import React, { CSSProperties } from \"react\";\n\nconst locale = 'en-GB'\nconst options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\nconst TransactionItem: React.FC<{ transaction: Transaction } & HTMLBaseElement> = React.forwardRef(\n    ({\n        transaction: { amount, currency, datetime, card: { lastNumbers } },\n        style, className }\n        , ref\n    ) => {\n        const formattedAmount = Intl\n            .NumberFormat(locale, { style: 'currency', currency })\n            .format(amount)\n\n        // @ts-ignore\n        const formattedDate = new Date(datetime).toLocaleDateString(locale, options)\n\n        return <div\n            className={className}\n            style={style as CSSProperties}\n            // @ts-ignore\n            ref={ref}\n        >\n            {Array(4 * 3).fill('*').concat(lastNumbers).join(' ')}\n            <p>\n                {formattedAmount}\n            </p>\n            <time dateTime={datetime}>{formattedDate}</time>\n        </div>\n    })\n\nexport default TransactionItem","export const endpoints = {\n    list: 'programs/{programId}/transactions'\n}\n\nexport const BASE_URL = 'https://api-dev.transactions.firebase/';\n\n// loaded using this: https://create-react-app.dev/docs/adding-custom-environment-variables/\nexport const {\n    REACT_APP_SECRET_KEY: SECRET_KEY,\n    REACT_APP_P_ID: P_ID\n} = process.env as unknown as CustomEnv\n\nexport const transactionChunkSize = 10","import { transactionChunkSize } from \"../../utils/constants\";\n\nexport const initialList = Array(transactionChunkSize).fill(null);\n\nexport const Skeleton = () => <div className=\"App-list__item App-list__item--skl\"></div>;\n","const mockResponse = {\n    count: 10,\n    items: Array(10).fill(null).map((_, id) => ({\n        id: `${id}`,\n        amount: id * 100,\n        currency: 'GBP',\n        datetime: new Date().toDateString(),\n        card: {\n            lastNumbers: '1234'\n        }\n    }))\n};\n\nexport default mockResponse;","import { useEffect, useState } from 'react';\nimport './App.css';\n\nimport { useInView } from 'react-intersection-observer';\nimport TransactionItem from '../Transaction';\nimport { initialList, Skeleton } from './skeleton';\nimport { animationDelayOrchestrator } from '../../utils/animation';\nimport { fetchTransactions } from './hooks';\n\nfunction App() {\n  const [transactions, setTransactions] = useState<Transaction[]>(initialList)\n  const [error, setError] = useState('')\n  const [lastTransaction, setLastTransaction] = useState<string | Transaction>('')\n\n  const { ref, inView, entry } = useInView({ rootMargin: '-30% 0px 0px' });\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(\n    fetchTransactions({ entry, inView, setTransactions, setLastTransaction, lastTransaction, transactions, setError })\n    , [inView]\n  )\n\n  const getIdx = animationDelayOrchestrator()\n  return (\n    <main className=\"App\">\n      <h1>Transactions</h1>\n      {\n        error\n          ? <p className=\"App-errorHeading\">{error}!</p>\n          : transactions.map((t, i) => {\n            return (t ?\n              <TransactionItem\n                key={t?.id}\n                className=\"App-list__item\"\n                style={{ \"--animation-order\": `${getIdx()}` } as unknown as CSSStyleDeclaration}\n                // @ts-ignore\n                ref={t.id === lastTransaction?.id ? ref : null}\n                transaction={t}\n              />\n              :\n              <Skeleton key={`skltn-${i}`}/>)\n          }\n          )\n      }\n    </main>\n  );\n}\n\nexport default App;\n","// import { getTransactions } from '../../utils/api';\nimport defaultTransactions from '../../utils/mocks';\n\nexport const fetchTransactions = ({ entry, inView, setTransactions, setLastTransaction, lastTransaction, transactions, setError }: any /** ðŸ¥² */) =>\n    () => {\n        // avoid refetching when ref changes to next last \n        if (entry?.target && !inView) { return }\n\n        // getTransactions({ last: lastTransaction })\n        new Promise((res, rej) => {\n            const timer = setTimeout(() => { clearTimeout(timer); res(undefined); }, 4000)\n        })\n            // .then((response) => {\n            .then(() => {\n                const response = defaultTransactions as TransactionResponse;\n                if (response.count < 1) { throw Error(\"No transactions to display!\") }\n\n                !lastTransaction\n                    ? setTransactions(response.items) // replaces skeleton\n                    : setTransactions([...transactions, ...response.items])\n\n                if (response.last?.id)\n                    setLastTransaction(response.last)\n            })\n            .catch((error: Error) => {\n                setError(error.message)\n            })\n    }","import { transactionChunkSize } from \"./constants\";\n\n\nexport const animationDelayOrchestrator = () => {\n    const maxIdx = transactionChunkSize - 1\n    let currentIdx = 0\n\n    const getIdx = () => {\n        if (currentIdx > maxIdx) {\n            currentIdx = 0\n            return currentIdx\n        }\n        return currentIdx++\n    }\n    return getIdx\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}